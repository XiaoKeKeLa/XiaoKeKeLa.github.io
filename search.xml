<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>堆排序</title>
      <link href="2020/10/21/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
      <url>2020/10/21/%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>堆排序</p><p>堆是一种数据结构，一种叫做完全二叉树的数据结构。</p><p>堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆；或者每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆。</p><p>大顶堆：a[i] &gt;=a[2i+1] &amp;&amp; ar[i] &gt;= a[2i+2]  </p><p>小顶堆：a[i] &lt;= a[2i+1] &amp;&amp; a[i] &lt;= a[2i+2]  </p><p><strong>堆排序的基本思想：</strong></p><p>堆排序的基本思想是：将待排序序列构造成一个大顶堆，此时，整个序列的最大值就是堆顶的根节点。将其与末尾元素进行交换，此时末尾就为最大值。然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了</p><p>算法思想：</p><p>1.把一组数据a[n]调整成大根堆或小根堆,用heapSize来实时记录数组尚未排序的数据的数量，初始值为a[n]长度n</p><p>2.将a[0]与a[–heapSize]交换值，因为一开始就把数据调整为大根堆，该步骤相当于把已经找出数组中最大的数据，并放到了最后一位，不再处理。</p><p>3.a[0]与a[–heapSize]交换值后，也破坏了大根堆，但除了a[0]以外，数组其他数据还是保持大根堆状态。此时就是一直将a[0]数据“下沉”，让他不断和孩子节点比较，直到找到孩子节点都比它小，停止“下沉”，被破坏了的大根堆又重新被调整为大根堆。不断–heapSize，不断调整大根堆，每次都把a[0]与a[–heapSize]交换值，最终数组有序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">t=a[n];</span><br><span class="line">a[n]=a[m];</span><br><span class="line">a[m]=t;</span><br><span class="line"> &#125; </span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> index,<span class="keyword">int</span> heapsize)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> left=index*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">while</span>(left&lt;heapsize)<span class="comment">//判断左孩子是否越界，若越界说明左孩子已经到达最下面 </span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="comment">//比较两个孩子谁的值大 ，谁的值大谁就是largest </span></span><br><span class="line"> <span class="keyword">int</span> largest=left+<span class="number">1</span>&lt;heapsize&amp;&amp;a[left+<span class="number">1</span>]&gt;a[left]?left+<span class="number">1</span>:left;</span><br><span class="line"> <span class="comment">//比较父节点和孩子节点的大小</span></span><br><span class="line"> largest=a[largest]&gt;a[index]?largest:index; </span><br><span class="line"> <span class="keyword">if</span>(largest==index)<span class="comment">//若发现孩子节点都比a[index]小，则循环结束</span></span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> swap(a,largest,index);</span><br><span class="line"> index=largest;</span><br><span class="line"> left=index*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapInsert</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> index)</span><span class="comment">//把数组调成大根堆 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(a[index]&gt;a[(index<span class="number">-1</span>)/<span class="number">2</span>])</span><br><span class="line">&#123;</span><br><span class="line">swap(a,index,(index<span class="number">-1</span>)/<span class="number">2</span>);</span><br><span class="line">index=(index<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="literal">NULL</span>||n&lt;<span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">heapInsert(a,i);</span><br><span class="line"><span class="keyword">int</span> heapSize=n;</span><br><span class="line">swap(a,<span class="number">0</span>,--heapSize);<span class="comment">//交换后大根堆的最大的值到数组最后一个位置 </span></span><br><span class="line"><span class="keyword">while</span>(heapSize&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//每次都把数组中0-heapSize调整成大根堆 </span></span><br><span class="line">heapify(a,<span class="number">0</span>,heapSize);</span><br><span class="line">swap(a,<span class="number">0</span>,--heapSize);</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> n;</span><br><span class="line"> <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"> <span class="keyword">int</span> a[n];</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line"> &#125;</span><br><span class="line"> heapSort(a,n);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随机快排</title>
      <link href="2020/10/21/%E9%9A%8F%E6%9C%BA%E5%BF%AB%E6%8E%92/"/>
      <url>2020/10/21/%E9%9A%8F%E6%9C%BA%E5%BF%AB%E6%8E%92/</url>
      
        <content type="html"><![CDATA[<p>快排在选取主元的时候，每次都选取最右边的元素。当序列为有序时，会发现划分出来的两个子序列一个里面没有元素，而另一个则只比原来少一个元素。为了避免这种情况，引入一个随机化量来破坏这种有序状态。</p><p>在随机化的快排里面，选取a[left..right]中的随机一个元素作为主元，然后再进行划分，就可以得到一个平衡的划分。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> random(x) rand()%(x)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">t=a[n];</span><br><span class="line">a[n]=a[m];</span><br><span class="line">a[m]=t;</span><br><span class="line"> &#125; </span><br><span class="line"> <span class="function"><span class="keyword">int</span> * <span class="title">partition</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> less=L<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> more=R;</span><br><span class="line"><span class="keyword">while</span>(L&lt;more)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[L]&lt;a[R])</span><br><span class="line">swap(a,++less,L++);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[L]&gt;a[R])</span><br><span class="line">swap(a,L,--more);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[L]==a[R]) </span><br><span class="line">&#123; </span><br><span class="line">L++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">swap(a,more,R);</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">2</span>]=&#123;less+<span class="number">1</span>,more&#125;;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&lt;R)</span><br><span class="line">&#123;</span><br><span class="line">swap(a,random(R-L+<span class="number">1</span>),R);<span class="comment">//与经典快排不同，随机在数组中选择一个数字进行比较 </span></span><br><span class="line"><span class="keyword">int</span> *p=partition(a,L,R);</span><br><span class="line">quicksort(a,L,p[<span class="number">0</span>]<span class="number">-1</span>);</span><br><span class="line">quicksort(a,p[<span class="number">1</span>]+<span class="number">1</span>,R);</span><br><span class="line">&#125;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> n;</span><br><span class="line"> <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"> <span class="keyword">int</span> a[n];</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line"> &#125;</span><br><span class="line"> quicksort(a,<span class="number">0</span>,n);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>多次实验结果：</p><p><strong>10w：</strong></p><table><thead><tr><th>算法</th><th>第1次耗时</th><th>第2次耗时</th><th>第3次耗时</th><th>平均耗时</th></tr></thead><tbody><tr><td>普通快排</td><td>13ms</td><td>15ms</td><td>15ms</td><td>14.333ms</td></tr><tr><td>随机化版本快排</td><td>25ms</td><td>25ms</td><td>27ms</td><td>25.667ms</td></tr></tbody></table><p><strong>100w：</strong></p><table><thead><tr><th>算法</th><th>第1次耗时</th><th>第2次耗时</th><th>第3次耗时</th><th>平均耗时</th></tr></thead><tbody><tr><td>普通快排</td><td>101ms</td><td>103ms</td><td>96ms</td><td>100ms</td></tr><tr><td>随机化版本快排</td><td>119ms</td><td>101ms</td><td>105ms</td><td>108.333ms</td></tr></tbody></table><p><strong>1000w：</strong></p><table><thead><tr><th>算法</th><th>第1次耗时</th><th>第2次耗时</th><th>第3次耗时</th><th>平均耗时</th></tr></thead><tbody><tr><td>普通快排</td><td>1397ms</td><td>1379ms</td><td>1338ms</td><td>1371.333ms</td></tr><tr><td>随机化版本快排</td><td>1241ms</td><td>1187ms</td><td>1258ms</td><td>1228.667ms</td></tr></tbody></table><p>随机化快排因为要生成随机数，所以有一些性能损失，所以数据规模较小，数据分布均匀时普通快排还是比随机化快排要快些的，不过随着数据规模的上升，随机化快排的性能优势就展现出来了。</p><p><strong>有序序列</strong></p><p>下来才是展示快排才华的时候，假设当输入数组已经是排好序的，这两个算法的性能差距又有多少？<br>之前的数组生成代码不变，只是在调用两个算法之前，先调用一下快排将数组排序，然后将两个有序的数组作为参数传进去。</p><p><strong>10w：</strong></p><p>10w的普通快排……已经栈溢出了。</p><table><thead><tr><th>算法</th><th>第1次耗时</th><th>第2次耗时</th><th>第3次耗时</th><th>平均耗时</th></tr></thead><tbody><tr><td>普通快排</td><td>溢出</td><td>溢出</td><td>溢出</td><td>溢出</td></tr><tr><td>随机化版本快排</td><td>15ms</td><td>7ms</td><td>6ms</td><td>9.333ms</td></tr></tbody></table><p><strong>1w：</strong></p><p>试一试1w的</p><table><thead><tr><th>算法</th><th>第1次耗时</th><th>第2次耗时</th><th>第3次耗时</th><th>平均耗时</th></tr></thead><tbody><tr><td>普通快排</td><td>98ms</td><td>94ms</td><td>92ms</td><td>94.667ms</td></tr><tr><td>随机化版本快排</td><td>2ms</td><td>1ms</td><td>0ms</td><td>1ms</td></tr></tbody></table><h4 id="1000w："><a href="#1000w：" class="headerlink" title="1000w："></a>1000w：</h4><p>看下1000w下随机化快排是否有影响</p><table><thead><tr><th>算法</th><th>第1次耗时</th><th>第2次耗时</th><th>第3次耗时</th><th>平均耗时</th></tr></thead><tbody><tr><td>随机化版本快排</td><td>696ms</td><td>733ms</td><td>689ms</td><td>706ms</td></tr></tbody></table><p><em>参考书籍：机械工业出版社 第三版<strong>《算法导论》</strong>部分内容引自原书</em></p>]]></content>
      
      
      <categories>
          
          <category> 算法刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
